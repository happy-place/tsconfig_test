{
  //  继承 ./basic-config.json
  "extends": "./basic-config.json",

  /*
    include 表示需要编译的ts文件
      ** 表示任意目录
      * 表示任意文件
   */
  "include": [
    "./src/**/*"
  ],
  /*
    只有指定文件被编译，其余被忽略，常在ts文件比较少时使用，文件较多时，使用include
  */
  //  "files": ["./src/c1/hello.ts"]

  /*
    忽略src/c2目录下所有文件，不参与ts文件编译，长与include搭配使用
  */
  //  "exclude": ["./src/c2/*"]

  // 编译相关可选参数
  "compilerOptions": {
    /*
       编译后js输出到./dist目录
    */
    "outDir": "./dist",

    /*
       编译js版本
       可选项：'es3', 'es5', 'es6', 'es2015', 'es2016', 'es2017', 'es2018', 'esnext'
       es3最老，兼容浏览器最多，常用es2015,当前最新编译规范为esnext
       	eg: 使用 es3编译后生成js文件，编译仍使用 var,而是有 es2015编译的js文件，变量使用let
    */
    "target": "es2015",

    /*
      可选项：'none', 'commonjs', 'amd', 'system', 'umd', 'es6', 'es2015', 'esnext'
      通常默认使用 commonjs
    */
    "module": "es2015",

    /*
      通常保持默认即可，例如js在浏览器运行，不需要使用dom,可以直接获取document，而在其他node场景运行，要获取dom，需要引入dom
      可选项：'es5', 'es6', 'es2015', 'es7', 'es2016', 'es2017', 'es2018', 'esnext', 'dom', 'dom.iterable', 'webworker',
      'webworker.importscripts', 'scripthost', 'es2015.core', 'es2015.collection', 'es2015.generator', 'es2015.iterable',
      'es2015.promise', 'es2015.proxy', 'es2015.reflect', 'es2015.symbol', 'es2015.symbol.wellknown', 'es2016.array.include',
      'es2017.object', 'es2017.sharedmemory', 'es2017.string', 'es2017.intl', 'es2017.typedarrays', 'es2018.intl',
      'es2018.promise', 'es2018.regexp', 'esnext.array', 'esnext.symbol', 'esnext.asynciterable', 'esnext.intl'
    */
    "lib": ["es2015","dom"],

    /*
      是否编译跟 ts 在一起的 js 文件，为 true,此时 js 文件将一起被编译到输出目录
    */

    "allowJs": true,

    /*
	  为 true 时，顺便检查 js 语法的类型约束，默认 false
    */
    "checkJs": false,

    /*
      编译后是否移除注释，默认false
    */
    "removeComments": false,

    /*
       配置后，只执行编译检查是否出错，不输出 js 文件
    */
    // "noEmit": true,

    /*
       执行编译时，如果报错，就不输出，避免污染
    */
    "noEmitOnError": true,

    /*
       启用严格模式，强制类型检查，编译生成 js 文件，顶部都标记 use strict
    */
    "alwaysStrict": true,

    /*
        使用 any 会导致类型检查实效，不推荐使用隐式和显示 any
        function add(a,b){ // 报错
        return a+ b
        }
    */
    // "noImplicitAny": true,

    /*
        禁止使用隐式 this
        function print(){
           console.log(this) // 报错
        }
    */
    // "noImplicitThis": true

    /*
        对象是否为 null 检查，避免出现空指针
        let div = document.getElementById("div1")
      // div.addEventListener('click',function (){ // 报错，可能为 null
      //     console.log("click")
      // })

      if (div != null){ // 方案 1
          div.addEventListener('click',function (){
              console.log("click")
          })
      }

      div?.addEventListener('click',function (){ // 方案 2
          console.log("click")
      })
    */
    "strictNullChecks": true,

    /*
        为 true 时，相当于开启全部严格检查
        为 false 时，关闭全部严格检查
    */
    "strict": false
  }
}